<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EDD on Apuntes YoC&#43; Comunitarios</title>
    <link>yoc&#43;/categories/EDD/</link>
    <description>Recent content in EDD on Apuntes YoC&#43; Comunitarios</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-cl</language><atom:link href="yoc+/categories/EDD/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Estructuras lineales</title>
      <link>yoc&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yoc&#43;/</guid>
      <description>Table of Contents  Vectores Stacks (pilas) Queues (colas)     Vectores Stacks (Pilas)  Vectores Los vectores son como arreglos, excepto de que el tamaño es dinámico, es decir, se puede cambiar. Incluimos la librería:
1  #include &amp;lt;vector&amp;gt;   Inicializamos nuestro vector &amp;ldquo;vec&amp;rdquo;:
2 3  int n = 3; vector &amp;lt; int &amp;gt; vec(n, 0); // Inicializa un vector de tamaño 3 con todos sus valores = 0.</description>
    </item>
    
    <item>
      <title>Vectores</title>
      <link>yoc&#43;/vectores/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yoc&#43;/vectores/</guid>
      <description>Table of Contents  Asignar un valor push back (empujar atrás) pop back (quitar atrás) insert (insertar) erase (borrar)    Los vectores son como arreglos, excepto de que el tamaño es dinámico, es decir, se puede cambiar. Incluimos la librería:
1  #include &amp;lt;vector&amp;gt;   Inicializamos nuestro vector &amp;ldquo;vec&amp;rdquo;:
2 3  int n = 3; vector &amp;lt; int &amp;gt; vec(n, 0); // Inicializa un vector de tamaño 3 con todos sus valores = 0.</description>
    </item>
    
    <item>
      <title>Stacks (pilas)</title>
      <link>yoc&#43;/stacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yoc&#43;/stacks/</guid>
      <description>Table of Contents  push (empujar) top (cima) pop (quitar) empty (vacío) size (tamaño)    La pila es una estructura de datos lineal al que sólo puedes acceder al último elemento que fue insertado. Imagina una pila de platos, por ejemplo.
1  stack &amp;lt; int &amp;gt; pilita;    push (empujar) Empuja un dato a la cima de la pila.
2  pilita.push(8); // Empuja un 8 a la cima de la pila.</description>
    </item>
    
  </channel>
</rss>
