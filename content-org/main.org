#+TITLE: Docs
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./docs
#+HUGO_WEIGHT: auto
#+OPTIONS: toc:1
#+AUTHOR: Comunidad YoC+
* Estructuras de datos
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./estructuras de datos
:HUGO_SECTION: ./edd
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: index
:END:
** Estructuras lineales
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./estructuras lineales
:HUGO_SECTION: ./lineales
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
*** Acerca de
:PROPERTIES:
:EXPORT_FILE_NAME: info
:END:
Rellenar página
*** Arrays (arreglos)
:PROPERTIES:
:EXPORT_FILE_NAME: arrays
:end:
Los arrays son conjuntos de datos que se almacenan en memoria de manera contigua usando el mismo nombre. Se usan índices para diferenciar los distintos valores del arreglo.
Para crear una arreglo es necesario saber la cantidad de elementos que van a componer nuestro arreglo, pues la cantidad de elementos no se puede cambiar.
Una cosa muy importante que al principio uno suele olvidar es que los índices de los arreglos parten en 0. Es decir, un arreglo de tamaño n puede tomar índices desde el 0 hasta el n-1.
**** Inicialización
Hay dos formas de inicializar un array, especificando su tamaño o llenandolo con valores por defecto.
***** Inicializar un array por su tamaño
Para inicializar un array por su tamaño, lo único que hay que especificar es el nombre de la variable y colocar entre "[]" el tamaño de nuestro arreglo. Recordar que como los arrays parten en 0, el valor máximo que podremos acceder será el tamaño del array menos 1.
#+begin_src cpp -n
int arreglo[38]; // Inicializar un arreglo de ints de tamaño 38.
#+end_src
***** Inicializar un array con valores por defecto
Para inicializar un array con valores por defecto, no es necesario especificar el tamaño de nuestro array, pues este está implícito en la cantidad de valores que introducimos.
#+begin_src cpp +n
int arreglo2[] = {3, 6, 2, 1};
#+end_src
**** Leer el valor de un arreglo
Para leer un valor de nuestro arreglo, solo hay que especificar el nombre del arreglo y su índice. Notar que sólo se puede acceder a un valor de un arreglo a la vez.
#+begin_src cpp
arreglo2[3]; // Retorna 1
#+end_src
**** Asignar valores a un arreglo
Para esto, hay que especificar la variable, el índice al cuál acceder y especificar su nuevo valor. Recordar que el valor del índice puede ser una variable, pero que no puede estar fuera del rango del tamaño de nuestro arreglo.
#+begin_src cpp +n
arreglo2[3] = 5; // El indice 3 de nuestro arreglo, ahora tiene el valor 3
#+end_src
*** Arrays multidimensionales
:PROPERTIES:
:EXPORT_FILE_NAME: multi-dimension-arrays
:end:
Un array multidimensional es aquel que requiuere de más de un índice para ser llamado, como su nombre lo indica, es útil para cuando necesitamos acceder a datos que requieren más de una dimensión, como por ejemplo valores dentro de una malla. Otra forma de enternder los arrays multidimensionales es como un arreglo de arreglos (de arreglos de arreglos.. n veces, siendo n la cantidad de dimensiones). Los arreglos de 2 dimensiones también son conocidos como matrices.
**** Inicializar un arreglo multidimensional
Para esto, hay que especificar el tamaño de cada dimensión del array. Notar que la regla de que empiezan en 0 y terminan en n-1 se sigue cumpliendo. Es posible asignarles valores predeterminados, pero creo que eso se va poniendo exponencialmente más psicópata a medida de que vas incrementando las dimensiones del array a crear, por lo que no lo voy a demostrar.
#+begin_src cpp -n
int matriz[3][4];
int tridimensional[100][100][100];
#+end_src
**** Asignar valores en un arreglo multidimensional
Es muy similar a cómo se hace en un arreglo unidimensional, solo que se especifica cada índice.
#+begin_src cpp +n
int n = 3, m = 5;
matriz[2][1] = 10;
tridimensional[n][m] = 4;
#+end_src
*** Vectors (vectores)
:PROPERTIES:
:EXPORT_FILE_NAME: vectors
:END:
Los vectores son como arreglos, excepto de que el tamaño es dinámico, es decir, se puede cambiar.
**** Inicializar un vector
Incluimos la librería:
#+BEGIN_SRC cpp -n
#include <vector>
#+END_SRC
Inicializamos nuestro vector "vec":
#+BEGIN_SRC cpp +n
int n = 3;
vector < int > vec(n, 0); // Inicializa un vector de tamaño 3 con todos sus valores = 0. Tanto el tamaño como valor son opcionales.
#+END_SRC
**** Asignar un valor
#+BEGIN_SRC cpp +n
vec[2] = 1; // Asigna el valor "1" al índice 2 (es decir, al 3er valor del vector)
#+END_SRC
**** push back (empujar atrás)
Si no sabemos el tamaño de nuestro vector, podemos simplemente usar push_back(valor); para enviar es valor al final del vector.
#+BEGIN_SRC cpp +n
vec.push_back(1); // Inserta un 1 al final del vector
#+END_SRC
Por ejemplo, se podría usar en un for, sin necesidad de inicializar el vector con una cantidad de valores.
#+BEGIN_SRC cpp +n
vector <int> vec2;
int n;
cin >> n;
for (int i = 0; i < n; ++i){
    int valor;
    cin >> valor;
    vec2.push_back();
}
#+END_SRC
**** pop back (quitar atrás)
Elimina el último valor del vector.
#+BEGIN_SRC cpp +n
vec.pop_back(); // En este caso, elimina el 1
#+END_SRC
**** insert (insertar)
Podemos insertar un valor entre dos indices de un vector. El problema de esto es que mueve todos los valores que estén más adelante, lo que es lento.
#+BEGIN_SRC cpp +n
vec.insert(vec.begin() + 2, 4); // Inserta el valor 4 al índice 2
#+END_SRC
**** erase (borrar)
Borra un dato del vector. Al igual que el insert, tiene que mover todos los datos siguientes (esta vez a la derecha).
#+BEGIN_SRC cpp +n
vec.erase(vec.begin() + 2); // Elimina el valor con índice 2, en nuestro caso, el 4 que insertamos antes.
#+END_SRC
**** Iteradores de un arreglo
Hay ciertos iteradores que podemos usar en un arreglo que nos ayudarán en algunos casos, como por ejemplo si quieremos recorrer un arreglo. Estos son:
- begin() -- Iterador que accede al primer valor del arreglo.
- end() -- Accede al final del arreglo.
- rbegin() -- Accede al ultimo elemento del arreglo
- rend -- Accede al inicio del arreglo
*** Stacks (pilas)
:PROPERTIES:
:EXPORT_FILE_NAME: stacks
:END:
La pila es una estructura de datos lineal al que sólo puedes acceder al último elemento que fue insertado. Imagina una pila de platos, por ejemplo.
#+BEGIN_SRC cpp -n
stack < int > pilita;
#+END_SRC
**** push (empujar)
Empuja un dato a la cima de la pila.
#+BEGIN_SRC cpp +n
pilita.push(8); // Empuja un 8 a la cima de la pila.
#+END_SRC
**** top (cima)
Lee lo que hay en la cima de la pila.
#+BEGIN_SRC cpp +n
pilita.top(); // Retorna el 8.
#+END_SRC
**** pop (quitar)
Remueve el dato de la cima de la pila.
#+BEGIN_SRC cpp +n
pilita.pop(); // Remueve el 8.
#+END_SRC
**** empty (vacío)
Retorna 1 si la pila está vacía, de lo contrario retorna 0.
#+BEGIN_SRC cpp +n
pilita.empty(); // Retorna 1 ya que nuestra pila está vacía.
#+END_SRC
**** size (tamaño)
Retorna el tamaño de nuestra pila.
#+BEGIN_SRC cpp +n
pilita.size(); // Retorna 0 ya que nuestra pila no tiene datos.
#+END_SRC
*** Queues (colas)
:PROPERTIES:
:EXPORT_FILE_NAME: queues
:END:
La cola es una estructura de datos lineal al que sólo puedes acceder al primer elemento que fue insertado. Imagina una fila de una caja de un supermercado, por ejemplo.
#+BEGIN_SRC cpp -n
queue < int > colita;
#+END_SRC
**** push (empujar)
Añade un dato al final de la cola.
#+BEGIN_SRC cpp +n
colita.push(5);
colita.push(4);
colita.push(3);
colita.push(2);
colita.push(1);
#+END_SRC
**** front (frente)
Lee el dato que está al frente de la cola.
#+BEGIN_SRC cpp +n
colita.front(); // Retorna 5, ya que fue lo primero que empujamos a la cola.
#+END_SRC
**** pop (quitar)
Remueve el dato que está al frente de la cola
#+BEGIN_SRC cpp +n
colita.pop();   // Remueve el 5
colita.front(); // Retorna 4, ya que fue lo segundo que empujamos a la cola (y que ahora está primero).
#+END_SRC
**** empty (vacío)
Retorna 1 si la cola está vacía, de lo contrario retorna 0.
#+BEGIN_SRC cpp +n
colita.empty(); // Retorna 1 ya que nuestra cola está vacía.
#+END_SRC
**** size (tamaño)
Retorna el tamaño de nuestra cola.
#+BEGIN_SRC cpp +n
colita.size(); // Retorna 0 ya que nuestra cola no tiene datos.
#+END_SRC

#+RESULTS:

** Estructuras en forma de árbol
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./estructuras de arboles
:HUGO_SECTION: ./arbol
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
*** Acerca de
:PROPERTIES:
:EXPORT_FILE_NAME: info
:END:
Véase: arbol binario
*** Set (conjunto)
:PROPERTIES:
:EXPORT_FILE_NAME: set
:END:
Es una lista que no permite que hayan elementos repetidos.
**** Inicialización
Incluimos la librería:
#+BEGIN_SRC cpp -n
#include <set>
#+END_SRC
Inicializamos nuestro conjunto:
#+BEGIN_SRC cpp +n
set < int > conjunto; // int puede ser reemplazado con cualquier otro tipo de dato
#+END_SRC
**** insert (Insertar)
Inserta un dato. Retorna un par de elementos, el primero siendo el iterador del valor insertado y el segundo siendo un bool que marca si es que ya existía o no. En el ejemplo de abajo, usamos .second para comprobar si se insertó correctamente o no.
#+BEGIN_SRC cpp +n
if (conjunto.insert(10).second) // Retorna TRUE ya que no estaba anteriormente
    cout << "ganai\n"; if (conjunto.insert(10).second); // Retorna FALSE ya que ya había un 10.
cout << "no ganai\n";
conjunto.insert(20);
conjunto.insert(40);
conjunto.insert(30);
conjunto.insert(11);
#+END_SRC
**** find (Encontrar)
Busca un elemento en el set y si lo encuentra retorna un iterador al valor. De lo contrario, retorna conjunto.end();
#+BEGIN_SRC cpp +n
if (conjunto.find(10) != conjunto.end())
    cout << "ganai\n";
#+END_SRC
**** erase (borrar)
Puedes borrar un valor si le entregas el iterador al valor.
#+BEGIN_SRC cpp +n
set < int >::iterator it = conjunto.find(11);
if (it != conjunto.end())
    conjunto.erase(it);
#+END_SRC
**** Iterar a través de un conjunto
Puedes iterar a través de un conjunto con los valores ya ordenados con un iterador:
#+BEGIN_SRC cpp +n
// Imprime 10 11 20 30 40
for (it = conjunto.begin(); it != conjunto.end(); ++it)
    cout << *it << " ";
cout << '\n';
#+END_SRC
*** Map (mapa, tabla de hashing)
:PROPERTIES:
:EXPORT_FILE_NAME: map
:END:
Toma dos datos, una llave y un valor. Puedes buscar una llave en tiempo logarítmico con la implementación de la STL. Pero con otras implementaciones se puede hacer en tiempo constante. Las llaves no se pueden repetir.
**** Ejemplo cotidiano
Libros:
| Título (Llave)               | Autor (Valor)   |
|------------------------------+-----------------|
| The C Programming Language   | Brian Keringhan |
| The AWK Programming Language | Brian Keringhan |
| 1984                         | George Orwell   |

Curso:
| Apellido | Cantidad de alumnos con el apellido |
|----------+-------------------------------------|
| Gonzalez |                                   3 |
| Perez    |                                   2 |

**** Inicializar
Incluimos la librería de map:
#+BEGIN_SRC cpp -n
#include <map>
#+END_SRC
Inicializamos el mapa curso:
#+BEGIN_SRC cpp +n
map<string, int> curso;
#+END_SRC
**** Insert (insertar)
Forma 1:
#+BEGIN_SRC cpp +n
curso["perez"] = 1;
#+END_SRC
Forma 2:
#+BEGIN_SRC cpp +n
curso.insert(pair<string, int>("gonzalez, 3"));
#+END_SRC
**** Operar con los valores
Se puede operar con el valor tomando la llave.
Ejemplo 1:
#+BEGIN_SRC cpp +n
++curso.["perez"]; // Incrementar el valor de la llave perez, por ejemplo.
#+END_SRC
Ejemplo 2:
#+BEGIN_SRC cpp +n
cout << curso.["perez"] << endl; // El output será 2.
#+END_SRC
Cuidado con operar con valores no existentes, pues los inicializará de una forma inesperada.
**** Find (encontrar)
Retorna un iterador, si no lo encuentra, apunta a map.end()
Asignamos el iterador it a gonzalez, y luego lo usamos:
#+BEGIN_SRC cpp +n
map<string, int>::iterator it;
it = curso.find("gonzalez");

if (it != curso.end()){
cout << "Hay " << it->second << " " << it->first << " en el curso:\n";
cout << "Llave: " << it->first << " Valor: " << it->second << '\n';
}
#+END_SRC
Podemos incluso operar usando los iteradores:
#+BEGIN_SRC cpp +n
it->++second;
#+END_SRC
**** Erase (borrar)
Forma 1:
#+BEGIN_SRC cpp +n
it = curso.find("perez");
curso.erase(it);
#+END_SRC
Forma 2:
#+BEGIN_SRC cpp +n
curso.erase("gonzalez");
#+END_SRC
**** Recorrer los valores de un mapa
Es exactamente igual que en un conjunto:
#+BEGIN_SRC cpp +n
for (it = curso.begin(); it != curso.end(); ++it){
    cout << "Llave: " << it->first << " Valor: " << it->second << '\n';
}
#+END_SRC

**** Dudas que no dejan dormir
***** ¿Qué pasa si modifico una llave?
No se puede, tu código no compilará pues es ilegal hacerlo 👮🚓🚨
***** ¿Puedo buscar con el second?
No, en ese caso recomendamos otra estructura, o tener dos maps 👀
***** ¿Puedo tener un map dentro de un map?
Si, pero es de psicópata buscar dentro de ese map.

* Algoritmos de ordenamiento
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./Algoritmos de ordenamiento
:HUGO_SECTION: ./algoritmos_ordenamiento
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:EXPORT_COLLAPSIBLE: true
:END:
** Acerca de
:PROPERTIES:
:EXPORT_FILE_NAME: info
:END:
Un algoritmo de ordenamiento es aquel que toma los elementos de una estructura y les asigna un orden. Cada algoritmo de ordenamiento tiene su forma de operar, y podría ayudar a conseguir la respuesta a un problema, no necesariamente por el resultado del ordenamiento.
** Algoritmos de fuerza bruta
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./Algoritmos de fuerza bruta
:HUGO_SECTION: ./bruteforce
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
*** Acerca de
:PROPERTIES:
:EXPORT_FILE_NAME: info
:END:
Rellenar
*** Bubble sort
:PROPERTIES:
:EXPORT_FILE_NAME: bubble
:END:
 - Se van comparando los elementos, haciendo que los más grandes suban en el arreglo, como una burbuja.
 - Da lo mismo cómo estén ordenadas las cosas, porque puedes modificar la función de comparación.
 - Funciona invirtiendo el orden de cada par de elementos, si es que el primero es mayor que el segundo.
 - Por ejemplo, se podría usar para contar el número de inversiones que hay que hacer.
**** Ejemplo
| _5_ | _3_ | 4   | 1   |
|   3 | _5_ | _4_ | 1   |
|   3 | 4   | _5_ | _1_ |
|   3 | 4   | 1   | *5* |
|-----+-----+-----+-----|
| _3_ | _4_ | 1   | *5* |
|   3 | _1_ | _4_ | *5* |
|   3 | 1   | *4* | *5* |
|-----+-----+-----+-----|
| _3_ | _1_ | *4* | *5* |
|   1 | *3* | *4* | *5* |
|-----+-----+-----+-----|
| *1* | *3* | *4* | *5* |
**** Código de ejemplo:
#+begin_src cpp
void bubblesort (vector<int> &vec) {
    int size = vec.size();
    for (int i = size-1; i > 0; --i) {
        for (int j = 0; j < i; ++j) {
            if (vec[j] > vec[j+1]) {
                int aux = vec[j];
                vec[j] = vec[j+1];
                vec[j+1] = aux;
            }
        }
    }
    return;
}
#+end_src
*** Insertion sort
:PROPERTIES:
:EXPORT_FILE_NAME: insertion
:END:
- Se va de izquierda a derecha, se compara el segundo con el primero, se intercambian si el segundo es menor, si este es el caso, se vuelve a preguntar si el de la izquierda es menor al de mas a la izquierda y así hasta que se encuentre un caso en el que no o se llegue al principio del arreglo.
**** Rellenar ejemplo
**** Rellenar codigo de ejemplo
** Algoritmos de "decrecer y conquistar"
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./Algoritmos de decrecer y conquistar
:HUGO_SECTION: ./decrecer
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
*** Acerca de
:PROPERTIES:
:EXPORT_FILE_NAME: info
:END:
Rellenar
*** Selection sort
:PROPERTIES:
:EXPORT_FILE_NAME: selection
:END:
- Tiene dos sub-arreglos, uno de elementos ya ordenados y uno de los elementos resantes.
- El arreglo ya ordenado parte vacío.
- Busca el valor mínimo entre los elementos no ordenados y lo añade al final de los ordenados.
**** Rellenar ejemplo
**** Rellenar codigo de ejemplo

* Algoritmos de búsqueda
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./Algoritmos de busqueda
:HUGO_SECTION: ./algoritmos_busqueda
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
** Búsqueda binaria
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./Búsqueda binaria
:HUGO_SECTION: ./binary_search
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
*** Acerca de
   :PROPERTIES:
   :EXPORT_FILE_NAME: info
   :END:
La búsqueda binaria es un algoritmo de /divide and conquer/ (dividir y conquistar), que nos
permite encontrar un elemento dentro de una estructura *ordenada*
rápidamente. Al ejecutarse, toma el centro de un arreglo y comprueba si
el valor que se busca es igual al del centro. De no serlo, verifica si
el valor es menor o mayor al del centro.

Si el valor es mayor al del centro, se ignoran todos los valores
anteriores al centro, dividiendo la cantidad de números a la mitad.

Si el valor es menor al del centro, se ignoran todos los valores de
después del centro, dividiendo la cantidad de números a la mitad.

La complejidad de este algoritmo es *Olog(N)*, comparada con un
algoritmo lineal, que en el peor de los casos tiene complejidad *O(N)*.
**** Ejemplos
*****   en la vida real
Ir al medio de un diccionario, y buscar alfabéticamente, tomando una palabra central
(más o menos), viendo si la palabra que queremos está antes o después y repetir el
proceso de buscar una palabra central.

***** Ejemplo computacional
En esta imágen, se usa la búsqueda binaria para encontrar el 19.
[[https://uniwebsidad.com/static/libros/imagenes/algoritmos-python/f0801.png]]

*** Uso mediante la librería STL
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./En la STL
:HUGO_SECTION: ./stl
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
***** Importar
:PROPERTIES:
:EXPORT_FILE_NAME: importar
:END:
Podemos directamente importar toda la stl o podemos importar la librería <algorithm> de la
siguiente forma:
#+begin_src cpp -n
#include <algorithm>
#+end_src
***** binary_search()
:PROPERTIES:
:EXPORT_FILE_NAME: binary_search
:END:
La librería STL ya incluye binary search, si queremos saber si el valor
3 está en un vector, podemos ejecutar:

#+BEGIN_SRC cpp +n
vector<int> v{1,2,5,7};
if (binary_search (v.begin(), v.end(), 3)) {
    cout << "Se encuentra el valor 3 en nuestro vector\n";
}
else {
    cout << "No hay ningún 3 en nuestro vector\n";
}
#+END_SRC

Retorna un /bool/.

***** lower_bound() (límite inferior)
:PROPERTIES:
:EXPORT_FILE_NAME: lower_bound
:END:
La función lower_bound() de la librería STL retorna un puntero a un
valor *superior* o, si es posible, *igual* al entregado dentro de una
estructura ordenada.

Si todos los elementos en el arreglo son inferiores al valor pedido, se
entrega el último elemento del arreglo. Si los elementos del arreglo son
superiores al valor pedido, se entrega el primer elemento del arreglo.

Por ejemplo:
#+BEGIN_SRC cpp -n
  vector<int> v{ 10, 20, 30, 30, 30, 40, 50 };
  *lower_bound(v.begin(), v.end(), 30);
#+END_SRC

Valor de retorno: un iterador que apunta hacia *30* (el primero en el arreglo, en la posición [2])
***** upper_bound() (límite superior)
:PROPERTIES:
:EXPORT_FILE_NAME: lower_bound
:END:
La función upper_bound() de la librería STL nos entrega un puntero a un valor
*superior* al pedido en un arreglo ordenado.

En el caso de que no haya un valor superior al pedido, nos entrega el
último valor del arreglo.

Por ejemplo:
#+BEGIN_SRC cpp +n
  *upper_bound(v.begin(), v.end(), 30);
#+END_SRC

Valor de retorno: iterador al *40* (posición [4])
*** Implementaciones propias
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: ./Implementaciones propias
:HUGO_SECTION: ./implementaciones
:EXPORT_HUGO_MENU: :menu
:EXPORT_FILE_NAME: _index
:END:
**** Implementación con while
   :PROPERTIES:
   :EXPORT_FILE_NAME: con_while
   :END:
Esta implementación nos retorna el índice del número a buscar dentro de un arreglo.

#+BEGIN_SRC cpp -n
  int binarySearch(int arr[], int l, int r, int x)
  {

      while (l <= r) {
          int m = l + (r - l) / 2;

          // Revisa si x esta al medio
          if (arr[m] == x)
          return m;

          // Si x es mayor, ignorar la izquierda
          if (arr[m] < x)
          l = m + 1;

          // Si x es menor, ignorar la derecha
          else
          r = m - 1;

      }
      return -1;

  }
#+END_SRC

**** Implementación recursiva
   :PROPERTIES:
   :EXPORT_FILE_NAME: con_recursion
   :END:
Esta implementación nos retorna el índice del número a buscar dentro de un arreglo.

#+BEGIN_SRC cpp -n
  int binarySearch(int arr[], int l, int r, int x)
  {

      if (r >= l) {

          int mid = l + (r - l) / 2;

          // Revisa si x esta al medio

          if (arr[mid] == x)
          return mid;

          // Si x es mayor, ignorar la izquierda
          if (arr[mid] > x)
          return binarySearch(arr, l, mid - 1, x);
          // Si x es mayor, ignorar la derecha
          return binarySearch(arr, mid + 1, r, x);
      }
      return -1;
  }
#+END_SRC

#+RESULTS:
